{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**\r\n * @author 逍遥\r\n * @update 2019.4.15\r\n * @version 1.2.3\r\n */\r\nconst Version = '1.2.3'\r\nconst TYPE_ARRAY = '[object Array]'\r\nconst TYPE_OBJECT = '[object Object]'\r\n\r\nfunction Store(option) {\r\n  //必要参数的默认值处理\r\n  const {\r\n    state = {},\r\n      openPart = false,\r\n      behavior,\r\n      methods = {},\r\n      pageLisener = {},\r\n      nonWritable = false\r\n  } = option\r\n\r\n  //状态初始化\r\n  this.$state = {}\r\n  if (_typeOf(option.state) === TYPE_OBJECT) {\r\n    this.$state = Object.assign({}, _deepClone(option.state))\r\n  }\r\n  //页面+组件树\r\n  this.$r = []\r\n  //创建时，添加组件\r\n  const _create = function(r, o = {}) {\r\n    r.$store = {}\r\n    const {\r\n      useProp\r\n    } = o;\r\n    if (o.hasOwnProperty('useProp')) {\r\n      if (useProp && typeof useProp === 'string' || _typeOf(useProp) === TYPE_ARRAY) {\r\n        r.$store.useProp = [].concat(useProp)\r\n      } else {\r\n        r.$store.useProp = []\r\n      }\r\n    }\r\n    \r\n    r.$store.useStore = canUseStore(o)\r\n    if (canUseStore(o)) {\r\n      _store.$r.push(r)\r\n      if (r.$store.useProp) {\r\n        r.setData({\r\n          $state: _filterKey(_store.$state, r.$store.useProp, (key, usekey) => key === usekey)\r\n        })\r\n      } else {\r\n        r.setData({\r\n          $state: _store.$state\r\n        })\r\n      }\r\n    }\r\n\r\n  }\r\n  //销毁时，移除组件\r\n  const _destroy = function(r) {\r\n    let index = _store.$r.findIndex(item => item === r)\r\n    if (index > -1) {\r\n      _store.$r.splice(index, 1)\r\n    }\r\n  }\r\n  //状态局部模式\r\n  this.$openPart = openPart\r\n  //其他参数\r\n  const _store = this\r\n  const pageLife = [\r\n    'data',\r\n    'onLoad',\r\n    'onShow',\r\n    'onReady',\r\n    'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onShareAppMessage',\r\n    'onPageScroll',\r\n    'onTabItemTap'\r\n  ]\r\n  const canUseStore = function(o = {}) {\r\n    return (openPart === true && o.useStore === true) || !openPart\r\n  }\r\n\r\n  const originPage = Page,\r\n    originComponent = Component\r\n\r\n  //重写Page\r\n  App.Page = function(o = {}, ...args) {\r\n    if (canUseStore(o)) {\r\n      //状态注入\r\n      o.data = Object.assign(o.data || {}, {\r\n        $state: _store.$state\r\n      })\r\n    }\r\n    //行为注入\r\n    Object.keys(methods).forEach(key => {\r\n      //不能是周期事件\r\n      if (\r\n        typeof methods[key] === 'function' &&\r\n        !pageLife.some(item => item === key)\r\n      ) {\r\n        o[key] = methods[key]\r\n      }\r\n    })\r\n    //覆盖原周期\r\n    const originCreate = o.onLoad\r\n    o.onLoad = function() {\r\n      _create(this, o)\r\n      originCreate && originCreate.apply(this, arguments)\r\n    }\r\n    const originonDestroy = o.onUnload\r\n    o.onUnload = function() {\r\n      _destroy(this)\r\n      originonDestroy && originonDestroy.apply(this, arguments)\r\n    }\r\n    //其他页面周期事件注入 pageListener\r\n    Object.keys(pageLisener).forEach(key => {\r\n      //不能是周期事件\r\n      if (\r\n        typeof pageLisener[key] === 'function' &&\r\n        pageLife.some(item => item === key)\r\n      ) {\r\n        const originLife = o[key]\r\n        o[key] = function() {\r\n          pageLisener[key].apply(this, arguments)\r\n          originLife && originLife.apply(this, arguments)\r\n        }\r\n      }\r\n    })\r\n    originPage(o, ...args)\r\n  }\r\n\r\n  if (!nonWritable) {\r\n    try {\r\n      Page = App.Page\r\n    } catch (e) {}\r\n  }\r\n\r\n  //重写组件\r\n  App.Component = function(o = {}, ...args) {\r\n    //状态注入\r\n    if (canUseStore(o)) {\r\n      o.data = Object.assign(o.data || {}, {\r\n        $state: _store.$state\r\n      })\r\n    }\r\n    //行为注入\r\n    Object.keys(methods).forEach(key => {\r\n      //不能是周期事件\r\n      if (\r\n        typeof methods[key] === 'function' &&\r\n        !pageLife.some(item => item === key)\r\n      ) {\r\n        o.methods || (o.methods = {})\r\n        o.methods[key] = methods[key]\r\n      }\r\n    })\r\n    //behavior\r\n    if (behavior) {\r\n      o.behaviors = [behavior, ...(o.behaviors || [])]\r\n    }\r\n    const {\r\n      lifetimes = {}\r\n    } = o\r\n\r\n    let originCreate = lifetimes.attached || o.attached,\r\n      originonDestroy = lifetimes.detached || o.detached\r\n    const attached = function() {\r\n      _create(this, o)\r\n      originCreate && originCreate.apply(this, arguments)\r\n    }\r\n\r\n    const detached = function() {\r\n      _destroy(this)\r\n      originonDestroy && originonDestroy.apply(this, arguments)\r\n    }\r\n    if (_typeOf(o.lifetimes) === TYPE_OBJECT) {\r\n      o.lifetimes.attached = attached\r\n      o.lifetimes.detached = detached\r\n    } else {\r\n      o.attached = attached\r\n      o.detached = detached\r\n    }\r\n\r\n    //覆盖原周期\r\n\r\n    originComponent(o, ...args)\r\n  }\r\n  if (!nonWritable) {\r\n    try {\r\n      Component = App.Component\r\n    } catch (e) {}\r\n  }\r\n\r\n  this.version = Version\r\n}\r\n\r\nStore.prototype.setState = function(obj, fn = () => {}) {\r\n  if (_typeOf(obj) !== TYPE_OBJECT) {\r\n    throw new Error('setState的第一个参数须为object!')\r\n  }\r\n  console.timeline && console.timeline('setState')\r\n  let prev = this.$state\r\n  let current = setData(obj, prev)\r\n  this.$state = current\r\n  //如果有组件\r\n  if (this.$r.length > 0) {\r\n    let diffObj = diff(current, prev)\r\n    console.log('diff后实际设置的值：', diffObj)\r\n    let keys = Object.keys(diffObj)\r\n    if (keys.length > 0) {\r\n      const newObj = {}\r\n      keys.forEach(key => {\r\n        newObj['$state.' + key] = diffObj[key]\r\n      })\r\n      let pros = this.$r.map(r => {\r\n        if (r.$store.hasOwnProperty('useProp')) {\r\n          let useprops = _filterKey(\r\n            newObj,\r\n            r.$store.useProp,\r\n            (key, useKey) => (key === '$state.' + useKey) || !!key.match(new RegExp('^[\\$]state.' + useKey + '[\\.|\\[]', 'g'))\r\n          )\r\n          if (Object.keys(useprops).length > 0) {\r\n            return new Promise(resolve => {\r\n              r.setData(useprops, resolve)\r\n            })\r\n          } else {\r\n            return Promise.resolve()\r\n          }\r\n        }\r\n        return new Promise(resolve => {\r\n          r.setData(newObj, resolve)\r\n        })\r\n      })\r\n      Promise.all(pros).then(fn)\r\n    } else {\r\n      fn()\r\n    }\r\n  } else {\r\n    fn()\r\n  }\r\n  console.timelineEnd && console.timelineEnd('setState')\r\n}\r\n\r\nconst _filterKey = function(obj, useKeys = [], fn) {\r\n  let result = {}\r\n  Object.keys(obj)\r\n    .filter(key =>\r\n      useKeys.some(usekey => {\r\n        return fn(key, usekey)\r\n      })\r\n    )\r\n    .forEach(key => {\r\n      result[key] = obj[key]\r\n    })\r\n  return result\r\n}\r\n\r\nconst _typeOf = function(val) {\r\n  return Object.prototype.toString.call(val)\r\n}\r\n\r\nconst setData = function(obj, data) {\r\n  let result = _deepClone(data)\r\n  Object.keys(obj).forEach(key => {\r\n    dataHandler(key, obj[key], result)\r\n  })\r\n  return result\r\n}\r\n\r\nconst dataHandler = function(key, result, data) {\r\n  let arr = pathHandler(key)\r\n  let d = data\r\n  for (let i = 0; i < arr.length - 1; i++) {\r\n    keyToData(arr[i], arr[i + 1], d)\r\n    d = d[arr[i]]\r\n  }\r\n  d[arr[arr.length - 1]] = result\r\n}\r\n\r\nconst pathHandler = function(key) {\r\n  let current = '',\r\n    keyArr = []\r\n  for (let i = 0, len = key.length; i < len; i++) {\r\n    if (key[0] === '[') {\r\n      throw new Error('key值不能以[]开头')\r\n    }\r\n    if (key[i].match(/\\.|\\[/g)) {\r\n      cleanAndPush(current, keyArr)\r\n      current = ''\r\n    }\r\n    current += key[i]\r\n  }\r\n  cleanAndPush(current, keyArr)\r\n  return keyArr\r\n}\r\n\r\nconst cleanAndPush = function(key, arr) {\r\n  let r = cleanKey(key)\r\n  if (r !== '') {\r\n    arr.push(r)\r\n  }\r\n}\r\n\r\nconst keyToData = function(prev, current, data) {\r\n  if (prev === '') {\r\n    return\r\n  }\r\n  const type = _typeOf(data[prev])\r\n  if (typeof current === 'number' && type !== TYPE_ARRAY) {\r\n    data[prev] = []\r\n  } else if (typeof current === 'string' && type !== TYPE_OBJECT) {\r\n    data[prev] = {}\r\n  }\r\n}\r\n\r\nconst cleanKey = function(key) {\r\n  if (key.match(/\\[\\S+\\]/g)) {\r\n    let result = key.replace(/\\[|\\]/g, '')\r\n    if (!Number.isNaN(parseInt(result))) {\r\n      return +result\r\n    } else {\r\n      throw new Error(`[]中必须为数字`)\r\n    }\r\n  }\r\n  return key.replace(/\\[|\\.|\\]| /g, '')\r\n}\r\n\r\nconst _deepClone = function(obj) {\r\n  return JSON.parse(JSON.stringify(obj))\r\n}\r\n\r\n/**\r\n * diff算法\r\n * @author 逍遥\r\n */\r\nconst addDiff = function addDiff(\r\n  current = {},\r\n  prev = {},\r\n  root = '',\r\n  result = {}\r\n) {\r\n  Object.entries(current).forEach(item => {\r\n    let key = item[0],\r\n      value = item[1],\r\n      path = root === '' ? key : root + '.' + key\r\n    if (_typeOf(current) === TYPE_ARRAY) {\r\n      path = root === '' ? key : root + '[' + key + ']'\r\n    }\r\n\r\n    if (!prev.hasOwnProperty(key)) {\r\n      result[path] = value\r\n    } else if (\r\n      (_typeOf(prev[key]) === TYPE_OBJECT &&\r\n        _typeOf(current[key]) === TYPE_OBJECT) ||\r\n      (_typeOf(prev[key]) === TYPE_ARRAY &&\r\n        _typeOf(current[key]) === TYPE_ARRAY)\r\n    ) {\r\n      addDiff(current[key], prev[key], path, result)\r\n    } else if (prev[key] !== current[key]) {\r\n      result[path] = value\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\nconst nullDiff = function nullDiff(\r\n  current = {},\r\n  prev = {},\r\n  root = '',\r\n  result = {}\r\n) {\r\n  Object.entries(prev).forEach(item => {\r\n    let key = item[0],\r\n      value = item[1],\r\n      path = root === '' ? key : root + '.' + key\r\n    if (_typeOf(current) === TYPE_ARRAY) {\r\n      path = root === '' ? key : root + '[' + key + ']'\r\n    }\r\n\r\n    if (!current.hasOwnProperty(key)) {\r\n      result[path] = null\r\n    } else if (\r\n      (_typeOf(prev[key]) === TYPE_OBJECT &&\r\n        _typeOf(current[key]) === TYPE_OBJECT) ||\r\n      (_typeOf(prev[key]) === TYPE_ARRAY &&\r\n        _typeOf(current[key]) === TYPE_ARRAY)\r\n    ) {\r\n      nullDiff(current[key], prev[key], path, result)\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\nconst diff = function diff(current = {}, prev = {}) {\r\n  let result = {}\r\n  addDiff(current, prev, '', result)\r\n  nullDiff(current, prev, '', result)\r\n  return result\r\n}\r\n\r\nmodule.exports = Store"]}